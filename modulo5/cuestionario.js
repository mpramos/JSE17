//! M√≥dulo 5: Cuestionario 

//! 1. El siguiente fragmento de c√≥digo:
function saludo() { }
//! es:
//* Opciones ‚úç:
//* a) La llamada a la funci√≥n saludo.
//* b) La declaraci√≥n de una funci√≥n vac√≠a llamada saludo. ‚úî
//* c) Incorrecto, el c√≥digo no significa nada.
//* d) La declaraci√≥n de una variable llamada saludo.

//! 2. Si una funci√≥n debe devolver un valor calculado, ¬øqu√© palabra clave utilizar√≠as?
//* Opciones ‚úç:
//* a) devolver;
//* b) retornar;
//* c) return; ‚úî
//* d) calcular;
function suma(a,b) {
    return a+b
}
console.log(suma(3,4));

//! 3. Analiza el siguiente c√≥digo:
function cuenta(numero) { //4 3 2 1
    console.log("cuenta");  // cuenta  
    if (numero > 1) cuenta(--numero); 3
}
cuenta(4);

//¬øCu√°ntas veces se mostrar√° "cuenta" en la consola?
//* Opciones ‚úç:
//* a) 3
//* b) 4 ‚úî 
//* c) 5 
//* d) 0



//! 4. Analiza el siguiente c√≥digo:
 let a = 5;
 function prueba() {
     let a = 15;
     console.log(a);
 }
 prueba()
 console.log(a);
 
// ¬øQu√© se mostrar√° en la consola?
//* Opciones ‚úç:
//* a) 15,5 ‚úî
//* b) 5
//* c) a
//* d) Nada aparecer√°.

//! 5. Revisa el siguiente c√≥digo:
 let valor = 30;
 function prueba(valor) {
     console.log(valor);
 }
 prueba(50);
//* Opciones ‚úç:
//* a) 50 ‚úî
//* b) 30
//* c) valor
//* d) Nada se mostrar√°.

//! 6. Revisa el siguiente c√≥digo:
let m = 12;
let n = 20;
function mostrar(m) {
    console.log(m);
}
mostrar(n);
//* Opciones ‚úç:
//* a) Nada, porque la funci√≥n espera m y recibe n.
//* b) 12
//* c) 18 ‚úî
//* d) m

//! 7. Has definido la siguiente expresi√≥n de funci√≥n:
let resta = function (x, y) {
     return x - y;
 }

 let resta1= (x,y)=> x-y
 console.log( resta1(5,4));
 

//! ¬øC√≥mo podr√≠a definirse la funci√≥n correspondiente como una funci√≥n flecha?
//* Opciones ‚úç:
//* a) let resta = (x, y) => x - y; ‚úî
//* b) let resta = function (x, y) => x - y;
//* c) let resta = (x, y) > x - y;
//* d) let resta = (x, y) => { return x - y };

//! 8. La siguiente funci√≥n flecha est√° definida:
// let dividir = (a, b) => a / b;
//! ¬øC√≥mo podr√≠as reescribir esta funci√≥n sin cambiar lo que hace?
//* Opciones ‚úç:
//* a) let dividir = (a, b) => { a / b; }
//* b) let dividir = (a, b) => { console.log(a / b); }
//* c) let dividir = (a, b) => { return a / b; } ‚úî
//* d) let dividir = (a, b) => return a / b;
console.log(dividir(4,2)) 

//! 9. Podemos usar el m√©todo forEach para recorrer los elementos de un arreglo.
//! ¬øCu√°l de los siguientes fragmentos de c√≥digo mostrar√° todos los elementos consecutivos
//!  del arreglo frutas en la consola?
let frutas=['üçâ','üçè','üçé','üçá','üçà','ü•≠']

frutas.forEach(fruta => console.log(fruta ));



for (let posicion = 0; posicion < frutas.length; posicion++) {
    console.log(frutas[posicion])
    
}
//* Opciones ‚úç:
//* a) frutas.forEach(a => console.log(a)); ‚úî
//* b) frutas.forEach(a => a);
//* c) frutas.forEach(console.log(fruta));
//* d) forEach(frutas, a => { console.log(a); });

//! 10. Una funci√≥n callback es una funci√≥n que:
//* Opciones ‚úç:
//* a) Siempre se ejecuta en intervalos definidos.
//* b) Se pasa como argumento a otra funci√≥n y solo se llama en su c√≥digo. ‚úî
//* c) Contiene una referencia a s√≠ misma.
//* d) Siempre se llama con un retraso predefinido.
//! 11. Analiza el siguiente c√≥digo:
let imprimir = function () {
    console.log("hola");
}
setTimeout(imprimir, 1500);
//! ¬øQu√© ocurre cuando lo ejecutas?
//* Opciones ‚úç:
//* a) La consola muestra "hola" despu√©s de 1500 segundos.
//* b) La consola muestra "imprimir" despu√©s de 1.5 segundos.
//* c) La consola muestra "hola" despu√©s de 1.5 segundos. ‚úî
//* d) La consola muestra "hola" 1500 veces.
